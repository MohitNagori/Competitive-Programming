function processData(input) {
    x = [], y = [];
    input.forEach((line) => {
        line = line.trim().split(' ');
        x.push(parseInt(line[0]));
        y.push(parseInt(line[1]));
    });
    main(x, y)
} 

process.stdin.resume();
process.stdin.setEncoding("ascii");
_input = "";
process.stdin.on("data", function (input) {
    _input += input;
});

process.stdin.on("end", function () {
   processData(_input.split('\n'));
});

function main(x, y) {
    console.log(leastSquareRegressionLine(x, y).toFixed(3));
}

function leastSquareRegressionLine(x, y) {
    b = (x.length * sumOfMultiplication(x, y) - sum(x) * sum(y)) 
        / (x.length * sumOfSquares(x) - Math.pow(sum(x), 2));
    a = mean(y) - b * mean(x);
    return a + b * 80;   
}

function mean(x) {
    return x.reduce((acc, i) => { return acc += i}, 0) / x.length;
}

function sum(x) {
    return x.reduce((acc, i) => { return acc += i}, 0);
}

function sumOfSquares(x) {
    return x.reduce((acc, i) => { return acc += Math.pow(i, 2) }, 0);
}

function sumOfMultiplication(x, y) {
    return x.reduce((acc, i, index) => { return acc += i * y[index] }, 0);
}
