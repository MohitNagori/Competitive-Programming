import java.util.ArrayList;
import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

import java.util.ArrayList;
import java.util.Scanner;

enum Color {
    RED, GREEN
}

abstract class Tree {

    private int value;
    private Color color;
    private int depth;

    public Tree(int value, Color color, int depth) {
        this.value = value;
        this.color = color;
        this.depth = depth;
    }

    public int getValue() {
        return value;
    }

    public Color getColor() {
        return color;
    }

    public int getDepth() {
        return depth;
    }

    public abstract void accept(TreeVis visitor);
}

class TreeNode extends Tree {

    private ArrayList<Tree> children = new ArrayList<>();

    public TreeNode(int value, Color color, int depth) {
        super(value, color, depth);
    }

    public void accept(TreeVis visitor) {
        visitor.visitNode(this);

        for (Tree child : children) {
            child.accept(visitor);
        }
    }

    public void addChild(Tree child) {
        children.add(child);
    }
}

class TreeLeaf extends Tree {

    public TreeLeaf(int value, Color color, int depth) {
        super(value, color, depth);
    }

    public void accept(TreeVis visitor) {
        visitor.visitLeaf(this);
    }
}

abstract class TreeVis
{
    public abstract int getResult();
    public abstract void visitNode(TreeNode node);
    public abstract void visitLeaf(TreeLeaf leaf);

}

class SumInLeavesVisitor extends TreeVis {
    private int sum = 0;
    public int getResult() {
        return sum;
    }

    public void visitNode(TreeNode node) {
      	
    }

    public void visitLeaf(TreeLeaf leaf) {
      	sum += leaf.getValue();
    }
}

class ProductOfRedNodesVisitor extends TreeVis {
    private long product = 1L; 
    private int M = 1000000007;
    
    public int getResult() {
      	return (int) product;
    }

    public void visitNode(TreeNode node) {
      	if (node.getColor().equals(Color.RED)) {
            product *= node.getValue(); 
            product %= M;
        }
    }

    public void visitLeaf(TreeLeaf leaf) {
      	if (leaf.getColor().equals(Color.RED)) {
            product *= leaf.getValue(); 
            product %= M;
        }
    }
}

class FancyVisitor extends TreeVis {
    private int diff = 0;
    public int getResult() {
      	return Math.abs(diff);
    }

    public void visitNode(TreeNode node) {
    	if (node.getDepth() % 2 == 0) {
            diff += node.getValue();
        }
    }

    public void visitLeaf(TreeLeaf leaf) {
    	if (leaf.getColor().equals(Color.GREEN)) {
            diff -= leaf.getValue();
        }
    }
}

public class Solution {
    static int N;
    static int[] values;
    static int[] colors;
    static boolean[] visited;
    static HashMap<Integer, HashSet<Integer>> map;
    
    public static Tree solve() {
        Scanner s = new Scanner(System.in);
        N = s.nextInt();
        
        values = new int[N]; 
        colors = new int[N];
        
        for (int i = 0; i < N; i++)
            values[i] = s.nextInt();
        
        map = new HashMap<Integer, HashSet<Integer>>();
        for (int i = 0; i < N; i++) {          
            colors[i] = s.nextInt();
            map.put(i, new HashSet<Integer>());  
        }

        for (int i = 0; i < N-1; i++) {
            int x = s.nextInt() - 1, y = s.nextInt() - 1;
            map.get(x).add(y);
            map.get(y).add(x);
        }

        return dfs(0);
    }

    public static Tree dfs(int vertex){
        if(map.get(vertex).isEmpty())
            return new TreeLeaf(values[vertex], Color.values()[colors[vertex]], 0);
        else{
            visited = new boolean[N];
            return runDfs(vertex, 0);
        }
    }

    public static Tree runDfs(int vertex, int depth){
        visited[vertex] = true;
        ArrayList<Tree> childs = new ArrayList<>();
        for(Integer e : map.get(vertex))
            if(!visited[e])
                childs.add(runDfs(e, depth + 1));

        if(childs.isEmpty())
            return new TreeLeaf(values[vertex], Color.values()[colors[vertex]], depth);
        else{
            TreeNode node = new TreeNode(values[vertex], Color.values()[colors[vertex]], depth);
            for(Tree child : childs)
                node.addChild(child);
            return node;
        }
    }


    public static void main(String[] args) {
      	Tree root = solve();
		    SumInLeavesVisitor vis1 = new SumInLeavesVisitor();
      	ProductOfRedNodesVisitor vis2 = new ProductOfRedNodesVisitor();
      	FancyVisitor vis3 = new FancyVisitor();

      	root.accept(vis1);
      	root.accept(vis2);
      	root.accept(vis3);

      	int res1 = vis1.getResult();
      	int res2 = vis2.getResult();
      	int res3 = vis3.getResult();

      	System.out.println(res1);
        System.out.println(res2);
        System.out.println(res3);
	  }
}
